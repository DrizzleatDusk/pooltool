name: test

on:
  pull_request:
    branches: [main]

jobs:
  pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.12]  # Define the Python versions you want to test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.8.3-${{ matrix.python-version }}-0
  
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
  
      - name: Cache Poetry dependencies
        id: cache-poetry-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - run: poetry install --no-interaction --no-root
        if: steps.cache-poetry-deps.outputs.cache-hit != 'true'

      # --- Pytest

      - name: pytest
        id: pytest
        continue-on-error: true
        run: |
          poetry run pytest --version
          poetry run pytest
          echo "pytest_failed=$?" >> $GITHUB_ENV

      - name: Test results
        if: always()
        run: |
          # Print out test results
          if [[ "${{ env.pytest_failed }}" != "0" ]]; then
            echo "❌ pytest FAILED"
            exit 1
          else
            echo "✅ pytest PASSED"
          fi
