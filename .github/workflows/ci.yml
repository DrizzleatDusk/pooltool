name: CI

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    # --- Pytest

    - name: pytest
      id: pytest
      continue-on-error: true
      run: |
        pytest
        echo "pytest_failed=$?" >> $GITHUB_ENV

    # --- Pyright

    - name: pyright
      id: pyright
      continue-on-error: true
      run: |
        pyright --project ./pyrightconfig.ci.json
        echo "pyright_failed=$?" >> $GITHUB_ENV

    # --- Ruff

    - name: ruff
      id: ruff
      continue-on-error: true
      run: |
        # Lint and check. Since the && operator is used, $? will capture 0 if neither commands fail,
        # will capture the lint exit code if it fails, and will capture the format exit code if it
        # fails.
        ruff check . && ruff format . --check
        echo "ruff_failed=$?" >> $GITHUB_ENV

    # --- Main

    - name: Test results
      if: always()
      run: |
        passed=()
        failed=()

        if [[ "${{ env.pytest_failed }}" != "0" ]]; then
          failed+=("pytest")
        else
          passed+=("pytest")
        fi

        if [[ "${{ env.pyright_failed }}" != "0" ]]; then
          failed+=("pyright")
        else
          passed+=("pyright")
        fi

        if [[ "${{ env.ruff_failed }}" != "0" ]]; then
          failed+=("ruff")
        else
          passed+=("ruff")
        fi

        if [ ${#passed[@]} -ne 0 ]; then
          echo "‚úÖ PASSED:"
          for check in "${passed[@]}"; do
            echo "    - $check"
          done
        fi

        echo ""

        if [ ${#failed[@]} -ne 0 ]; then
          echo "‚ùå FAILED:"
          for check in "${failed[@]}"; do
            echo "    - $check"
          done
        else
          echo "üöÄ‚úÖ ALL TESTS PASSED ‚úÖüöÄ"
        fi

        echo ""
        echo "Click above jobs for details on each success/failure"

        if [ ${#failed[@]} -ne 0 ]; then
          exit 1
        fi
